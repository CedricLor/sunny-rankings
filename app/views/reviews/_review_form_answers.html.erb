<% user_rating_option_array = [] %>
<% @tests.fetch(a.index).select_options.split(";").each_with_index do |answer, i| %>
  <% user_rating_option_array << ["x", i + 1] %>
  <%# + 1 is here to fix minimum grade to 1 and maximum to 5 instead of 0 and 4 respect. %>
<% end %>

<%= a.input :user_rating,
    as: :radio_buttons,
    boolean_style: :inline,
    collection: (user_rating_option_array),
    label: "#{@tests.fetch(a.index).test_long_question}",
    label_html: {
      class: "block"
      },
    wrapper_html: {
      class: "text-center my-rating-wrapper"
    },
    item_wrapper_class: "inline-block",
    input_html: {
      class: "rating-input my-hidden-input"
    },
    checked: params[:action] == 'show' && params[:controller] == 'firms' ? 3 : nil
  %>
<div class="vote-impact-wrapper" data-prior-answers-count='<%= @answer_count_by_test.fetch(a.index + 1) %>' data-prior-answers-total='<%= @total_by_test.fetch(a.index + 1) %>'>

    <table class="table table-striped table-responsive">
      <tr>
        <td>
          Current rating
        </td>
        <td>
          <span class="badge"><%= @avg_ratings_by_test.fetch(a.index + 1).to_f.round(1) %></span>
        </td>
        <td>
          <span class="badge trend-badge">
            <% css_class_for_arrow = {up: "rotate-right-up", down: "rotate-right-down", neutral: "rotate-neutral"} %>
            <% arrow_direction = :neutral %>
            <% arrow_direction = :up if (@current_period_averages.fetch(a.index + 1).to_f > @previous_period_averages.fetch(a.index + 1).to_f) %>
            <% arrow_direction = :down if @current_period_averages.fetch(a.index + 1).to_f < @previous_period_averages.fetch(a.index + 1).to_f %>
              <i class="fa fa-long-arrow-up fa-lg <%= css_class_for_arrow[arrow_direction] %>"></i>
          </span>
        </td>
      </tr>

      <%  unless @current_stage == :first_time_vote
            new_average_including_voter = ( (@total_by_test.fetch(a.index + 1) + @review.answers[a.index].user_rating ).to_f / (@answer_count_by_test.fetch(a.index + 1) + 1) ).to_f
            new_average_including_voter_rounded = new_average_including_voter.round(1)
            arrow_direction_including_voter = :neutral
            arrow_direction_including_voter = :up if ( new_average_including_voter > @avg_ratings_by_test.fetch(a.index + 1).to_f )
            arrow_direction_including_voter = :down if ( new_average_including_voter < @avg_ratings_by_test.fetch(a.index + 1).to_f )
          end
          voting_stages = {
            first_time_vote: {
              text: "potential",
              css_hidden_switch: "my-hidden-class",
              new_average_including_voter: "",
              arrow_direction_including_voter: :neutral},
            review_vote: {
              text: "potential",
              css_hidden_switch: "",
              new_average_including_voter: new_average_including_voter_rounded,
              arrow_direction_including_voter: arrow_direction_including_voter},
            archived_vote: {
              text: "real",
              css_hidden_switch: "",
              new_average_including_voter: new_average_including_voter_rounded,
              arrow_direction_including_voter: arrow_direction_including_voter}
          }
      %>
      <tr class="your-impact <%= voting_stages[@current_stage][:css_hidden_switch] %>">
        <td>
          Your <%= voting_stages[@current_stage][:text] %> impact
        </td>
        <td>
          <span class="badge average"><%= voting_stages[@current_stage][:new_average_including_voter] %></span>
        </td>
        <td>
          <span class="badge trend-badge">
            <i class="fa fa-long-arrow-up fa-lg <%= css_class_for_arrow[voting_stages[@current_stage][:arrow_direction_including_voter]] %>"></i>
          </span>
        </td>
      </tr>
    </table>

</div>
<hr/>


<%# TODO Erase
  This partial is called from the firms' controller (first review), the profile controller (validation) and the review controller (pendingreview).
%>